{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eUsUOPQnm0KN"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import recall_score\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JVi_xoUlb2Jn",
        "outputId": "44321b52-2819-4832-8dbc-67df72d81ba8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Using Colab cache for faster access to the 'heart-disease-dataset' dataset.\n",
            "Path to dataset files: /kaggle/input/heart-disease-dataset\n"
          ]
        }
      ],
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download latest version\n",
        "path = kagglehub.dataset_download(\"johnsmith88/heart-disease-dataset\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "azGbDGazhWan"
      },
      "outputs": [],
      "source": [
        "df= pd.read_csv('/kaggle/input/heart-disease-dataset/heart.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C0gq0Cz-hksf",
        "outputId": "2aaea80d-9f43-4239-ce33-bd411015c3b5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(1025, 14)"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "pwWqWHb8hwkn",
        "outputId": "c10d77f0-e34c-47ff-e6dc-453bf0d5c298"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1025,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          65,\n          50,\n          54\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.175053255150173,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-1f61e440-7f5d-4524-87ec-feca40374104\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>212</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>155</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>145</td>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>125</td>\n",
              "      <td>1</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>148</td>\n",
              "      <td>203</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>161</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>138</td>\n",
              "      <td>294</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>106</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f61e440-7f5d-4524-87ec-feca40374104')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f61e440-7f5d-4524-87ec-feca40374104 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f61e440-7f5d-4524-87ec-feca40374104');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-38b94316-512e-4ea3-aebb-d03d06bb852d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38b94316-512e-4ea3-aebb-d03d06bb852d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-38b94316-512e-4ea3-aebb-d03d06bb852d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
              "0   52    1   0       125   212    0        1      168      0      1.0      2   \n",
              "1   53    1   0       140   203    1        0      155      1      3.1      0   \n",
              "2   70    1   0       145   174    0        1      125      1      2.6      0   \n",
              "3   61    1   0       148   203    0        1      161      0      0.0      2   \n",
              "4   62    0   0       138   294    1        1      106      0      1.9      1   \n",
              "\n",
              "   ca  thal  target  \n",
              "0   2     3       0  \n",
              "1   0     3       0  \n",
              "2   0     3       0  \n",
              "3   1     3       0  \n",
              "4   3     2       0  "
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "GrT1x1TUND3h",
        "outputId": "34a5d7ea-1eb3-43cd-c314-a46bf977635b"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1025,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          65,\n          50,\n          54\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.175053255150173,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-37be3bd0-bcb7-4421-b3a1-31600e0415bf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>212</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>168</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>203</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>155</td>\n",
              "      <td>1</td>\n",
              "      <td>3.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>145</td>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>125</td>\n",
              "      <td>1</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>148</td>\n",
              "      <td>203</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>161</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>138</td>\n",
              "      <td>294</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>106</td>\n",
              "      <td>0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1020</th>\n",
              "      <td>59</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>140</td>\n",
              "      <td>221</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>164</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1021</th>\n",
              "      <td>60</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>258</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>141</td>\n",
              "      <td>1</td>\n",
              "      <td>2.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1022</th>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>110</td>\n",
              "      <td>275</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>118</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1023</th>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>110</td>\n",
              "      <td>254</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>159</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1024</th>\n",
              "      <td>54</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>188</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>113</td>\n",
              "      <td>0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1025 rows × 14 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37be3bd0-bcb7-4421-b3a1-31600e0415bf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-37be3bd0-bcb7-4421-b3a1-31600e0415bf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-37be3bd0-bcb7-4421-b3a1-31600e0415bf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8135ab4a-30bd-481b-a2cb-a465a78caafe\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8135ab4a-30bd-481b-a2cb-a465a78caafe')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8135ab4a-30bd-481b-a2cb-a465a78caafe button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ee6a11fd-2fe0-4d41-8253-d11f8b2e52e9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ee6a11fd-2fe0-4d41-8253-d11f8b2e52e9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n",
              "0      52    1   0       125   212    0        1      168      0      1.0   \n",
              "1      53    1   0       140   203    1        0      155      1      3.1   \n",
              "2      70    1   0       145   174    0        1      125      1      2.6   \n",
              "3      61    1   0       148   203    0        1      161      0      0.0   \n",
              "4      62    0   0       138   294    1        1      106      0      1.9   \n",
              "...   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n",
              "1020   59    1   1       140   221    0        1      164      1      0.0   \n",
              "1021   60    1   0       125   258    0        0      141      1      2.8   \n",
              "1022   47    1   0       110   275    0        0      118      1      1.0   \n",
              "1023   50    0   0       110   254    0        0      159      0      0.0   \n",
              "1024   54    1   0       120   188    0        1      113      0      1.4   \n",
              "\n",
              "      slope  ca  thal  target  \n",
              "0         2   2     3       0  \n",
              "1         0   0     3       0  \n",
              "2         0   0     3       0  \n",
              "3         2   1     3       0  \n",
              "4         1   3     2       0  \n",
              "...     ...  ..   ...     ...  \n",
              "1020      2   0     2       1  \n",
              "1021      1   1     3       0  \n",
              "1022      1   1     2       0  \n",
              "1023      2   0     2       1  \n",
              "1024      1   1     3       0  \n",
              "\n",
              "[1025 rows x 14 columns]"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tTviq0E8oRRp"
      },
      "outputs": [],
      "source": [
        "x, y = df.drop('target', axis=1), df['target']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7qLF817IkHmR"
      },
      "outputs": [],
      "source": [
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sD7_8BeHpH2L"
      },
      "source": [
        "## **Scale-Insensitive**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "XT0E8CiLpEWv",
        "outputId": "b8c457b5-066e-47e0-9faa-9e70af75d0c7"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "RandomForestClassifier()"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "forest = RandomForestClassifier()\n",
        "forest.fit(x_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "UTYNK2LXp9ao",
        "outputId": "29fa8578-aac4-4422-a5b2-ce525a86ff8d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GradientBoostingClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\">?<span>Documentation for GradientBoostingClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GradientBoostingClassifier()</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "GradientBoostingClassifier()"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "gb_clif = GradientBoostingClassifier()\n",
        "gb_clif.fit(x_train, y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yy5-hiooqQ61"
      },
      "source": [
        "### Scale-**Sensitive**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ga24_vd_qWoV"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "x_train_scaled = scaler.fit_transform(x_train)\n",
        "x_test_scaled = scaler.transform(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "bKdYE1Caqzq3",
        "outputId": "d0d8ec4e-f907-4844-89be-ce71a8b97ef2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "LogisticRegression()"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "log = LogisticRegression()\n",
        "log.fit(x_train_scaled, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aXx-tPrerICb",
        "outputId": "ebfb1d59-4685-4a59-9345-937db2492983"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9853658536585366"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "forest.score(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P_Rn2vzzrWBq",
        "outputId": "6e5ee681-7b93-4952-91c6-2fe93e81e182"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9317073170731708"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "gb_clif.score(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GVM9B8YJrctS",
        "outputId": "24497920-1236-4b6a-bcca-2fe86f246214"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7951219512195122"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "log.score(x_test_scaled, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bDRPCAyvsQYB",
        "outputId": "3fc0d41f-7bf3-46ee-efb9-625cd5c4bff9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "forest: 0.970873786407767\n",
            "GB: 0.9514563106796117\n",
            "Log: 0.8737864077669902\n"
          ]
        }
      ],
      "source": [
        "y_pred = forest.predict(x_test)\n",
        "print('forest:', recall_score(y_test, y_pred))\n",
        "\n",
        "y_pred = gb_clif.predict(x_test)\n",
        "print('GB:', recall_score(y_test, y_pred))\n",
        "\n",
        "y_pred = log.predict(x_test_scaled)\n",
        "print('Log:', recall_score(y_test, y_pred))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "oycQLzBOsqqg",
        "outputId": "3ae53af0-967a-450d-dd00-bde1bd017a97"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.metrics import roc_curve, roc_auc_score\n",
        "\n",
        "y_prob = forest.predict_proba(x_test)[:, 1]\n",
        "fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
        "plt.plot(fpr, tpr)\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S4AxK4n9u0S7",
        "outputId": "d2863686-1154-4cbb-a8a0-9c418547a053"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "np.float64(1.0)"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "roc_auc_score(y_test, y_prob)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TeUfxltnwNKR"
      },
      "source": [
        "### Hyperparameter Tuning"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "96OIgdPRwVQ8"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 500],\n",
        "    'max_depth': [None, 10, 20, 30],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'max_features': ['sqrt', 'log2', None]\n",
        "}\n",
        "\n",
        "forest = RandomForestClassifier(n_jobs=-1, random_state=9)\n",
        "grid_search = GridSearchCV(forest, param_grid, cv=3, n_jobs=-1, verbose=2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 183
        },
        "id": "6U-3vpDKxWre",
        "outputId": "8ad12b34-c998-446b-cb04-c965be8c3dd9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 3 folds for each of 324 candidates, totalling 972 fits\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=3, estimator=RandomForestClassifier(n_jobs=-1, random_state=9),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [None, 10, 20, 30],\n",
              "                         &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200, 500]},\n",
              "             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=3, estimator=RandomForestClassifier(n_jobs=-1, random_state=9),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [None, 10, 20, 30],\n",
              "                         &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200, 500]},\n",
              "             verbose=2)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=10, n_estimators=200, n_jobs=-1,\n",
              "                       random_state=9)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=10, n_estimators=200, n_jobs=-1,\n",
              "                       random_state=9)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ],
            "text/plain": [
              "GridSearchCV(cv=3, estimator=RandomForestClassifier(n_jobs=-1, random_state=9),\n",
              "             n_jobs=-1,\n",
              "             param_grid={'max_depth': [None, 10, 20, 30],\n",
              "                         'max_features': ['sqrt', 'log2', None],\n",
              "                         'min_samples_leaf': [1, 2, 4],\n",
              "                         'min_samples_split': [2, 5, 10],\n",
              "                         'n_estimators': [100, 200, 500]},\n",
              "             verbose=2)"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.fit(x_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ph9pVvztxcam"
      },
      "outputs": [],
      "source": [
        "best_forest = grid_search.best_estimator_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 97
        },
        "id": "GlyTr0X7Z6Aa",
        "outputId": "499186c9-fe7a-4b7d-9240-640cd52bb692"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=10, n_estimators=200, n_jobs=-1,\n",
              "                       random_state=9)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=10, n_estimators=200, n_jobs=-1,\n",
              "                       random_state=9)</pre></div> </div></div></div></div>"
            ],
            "text/plain": [
              "RandomForestClassifier(max_depth=10, n_estimators=200, n_jobs=-1,\n",
              "                       random_state=9)"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Itb2rC-0qEe",
        "outputId": "6b1e702a-42cb-4094-c202-2a94d80ea9bd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9853658536585366"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_forest.score(x_test, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hYs5ufz92gV8",
        "outputId": "4edf55de-cac0-44b2-9c36-cfea9ade9551"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "forest: 0.970873786407767\n"
          ]
        }
      ],
      "source": [
        "y_pred = best_forest.predict(x_test)\n",
        "print('forest:', recall_score(y_test, y_pred))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O0U9kkApyNUj"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import confusion_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3o7PHyuEqKzO",
        "outputId": "4da4482e-03b5-4e55-c5b6-5bac180b1bc9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "==================================================\n",
            " Random Forest Model Evaluation\n",
            "\n",
            " Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0      0.971     1.000     0.986       102\n",
            "           1      1.000     0.971     0.985       103\n",
            "\n",
            "    accuracy                          0.985       205\n",
            "   macro avg      0.986     0.985     0.985       205\n",
            "weighted avg      0.986     0.985     0.985       205\n",
            "\n",
            " Confusion Matrix:\n",
            "[[102   0]\n",
            " [  3 100]]\n",
            " ROC AUC Score: 1.000\n",
            "==================================================\n",
            " Gradient Boost Model Evaluation\n",
            "\n",
            " Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0      0.949     0.912     0.930       102\n",
            "           1      0.916     0.951     0.933       103\n",
            "\n",
            "    accuracy                          0.932       205\n",
            "   macro avg      0.932     0.932     0.932       205\n",
            "weighted avg      0.932     0.932     0.932       205\n",
            "\n",
            " Confusion Matrix:\n",
            "[[93  9]\n",
            " [ 5 98]]\n",
            " ROC AUC Score: 0.981\n",
            "==================================================\n",
            " Logistic Regression Model Evaluation\n",
            "\n",
            " Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0      0.849     0.716     0.777       102\n",
            "           1      0.756     0.874     0.811       103\n",
            "\n",
            "    accuracy                          0.795       205\n",
            "   macro avg      0.803     0.795     0.794       205\n",
            "weighted avg      0.802     0.795     0.794       205\n",
            "\n",
            " Confusion Matrix:\n",
            "[[73 29]\n",
            " [13 90]]\n",
            " ROC AUC Score: 0.879\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import classification_report, roc_auc_score\n",
        "\n",
        "models = {\n",
        "    'Random Forest': (best_forest, x_test),\n",
        "    'Gradient Boost': (gb_clif, x_test),\n",
        "    'Logistic Regression': (log, x_test_scaled)\n",
        "}\n",
        "\n",
        "for name, (model, test_data) in models.items():\n",
        "    print(\"=\"*50)\n",
        "    print(f\" {name} Model Evaluation\")\n",
        "\n",
        "    y_pred = model.predict(test_data)\n",
        "    print(\"\\n Classification Report:\")\n",
        "    print(classification_report(y_test, y_pred, digits=3))\n",
        "\n",
        "    print(\" Confusion Matrix:\")\n",
        "    print(confusion_matrix(y_test, y_pred))\n",
        "\n",
        "    if hasattr(model, \"predict_proba\"):\n",
        "        y_prob = model.predict_proba(test_data)[:, 1]\n",
        "        auc_score = roc_auc_score(y_test, y_prob)\n",
        "        print(f\" ROC AUC Score: {auc_score:.3f}\")\n",
        "    else:\n",
        "        print(\" ROC AUC Score not available (no predict_proba)\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SYLF-jnpc5-q"
      },
      "source": [
        "### Feature Importances"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "2EHldigsceg6",
        "outputId": "cefafcc8-7541-4ebc-9a6c-ec2510106eef"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "feature_importances = best_forest.feature_importances_\n",
        "features = best_forest.feature_names_in_\n",
        "\n",
        "sorted_idx = np.argsort(feature_importances)\n",
        "sorted_features = features[sorted_idx]\n",
        "sorted_importances = feature_importances[sorted_idx]\n",
        "\n",
        "colors = plt.cm.YlGn(sorted_importances / max(sorted_importances))\n",
        "\n",
        "plt.barh(sorted_features, sorted_importances, color=colors)\n",
        "plt.xlabel('Feature Importance')\n",
        "plt.ylabel('Features')\n",
        "plt.title('Feature Importance')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "2V0RM7QuCTMt",
        "outputId": "fdeb48fb-5170-48d5-8581-b09256fde66a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "models = ['Random Forest', 'Gradient Boost', 'Logistic Regression']\n",
        "accuracies = [0.985, 0.932, 0.795]\n",
        "roc_aucs = [1.0, 0.981, 0.879]\n",
        "\n",
        "x = range(len(models))\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.bar(x, accuracies, width=0.4, label='Accuracy', align='center')\n",
        "plt.bar(x, roc_aucs, width=0.4, label='ROC AUC', align='edge')\n",
        "plt.xticks(x, models)\n",
        "plt.ylabel('Score')\n",
        "plt.title('Model Performance Comparison')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FMaKIOvjC9vc"
      },
      "outputs": [],
      "source": [
        "models = {\n",
        "    'Random Forest': (best_forest, x_test),\n",
        "    'Gradient Boost': (gb_clif, x_test),\n",
        "    'Logistic Regression': (log, x_test_scaled)\n",
        "}\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "QsBcRJQNC-1h",
        "outputId": "323f2eb8-2f93-4c19-9113-2bcafb500870"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.metrics import roc_curve\n",
        "\n",
        "for name, (model, test_data) in models.items():\n",
        "    if hasattr(model, \"predict_proba\"):\n",
        "        y_prob = model.predict_proba(test_data)[:, 1]\n",
        "        fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
        "        plt.plot(fpr, tpr, label=f'{name}')\n",
        "\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve Comparison')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "KFblwZJeCfWe",
        "outputId": "09c63f50-6db6-4ea6-e4be-2dbf22688ea4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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dipfvrzGjh2rP/74Q7NmzVJERIS2bdvm+J5K89hjj6lq1aqaPHmyli5dqgkTJqhIkSKaN2+e7r//fr388statGiRhg8frgYNGqhZs2Y3PS/Xrl1L9z1fqFAhFSpUSMYYPfDAA1q1apX69eun2rVr65tvvtGIESP066+/avr06U7bfffdd/rwww81aNAgFStWTKGhoTp58qTuueceRygLDAzU119/rX79+ikxMVFDhw6VJM2fP1+DBw/WI488oiFDhujKlSvatWuXNm3apO7du2f5MwNAHmIAIA975513jKQMX8YYc/HiRRMQEGD69+/vtN3vv/9u7Ha70/LLly+n2//7779vJJk1a9Y4lr3yyitGkjl69KhT26NHjxpJ5p133km3H0lmzJgxjvdjxowxkky3bt2c2sXFxRk3NzczceJEp+W7d+827u7u6ZZndj42b97sWNarVy8jyUyaNMmx7Pz588bb29vYbDazePFix/L9+/enqzVtn/Xq1TNXr151LJ8yZYqRZD7//HNjjDGnTp0yHh4epk2bNiYlJcXRbvbs2UaSefvttx3LmjdvbiSZN954I10fqlevbpo3b55u+ZUrV5z2a8yf59zT09OMGzfOsWzVqlVGkqlatapJTk52LJ85c6aRZHbv3m2MMeb69eumXLlyJiQkxJw/f95pv6mpqY6vW7ZsacLDw82VK1ec1jdp0sSEhYWlq/PvCAkJMW3atDGnT582p0+fNrt37zY9evQwkszAgQOd2mb0eY2NjTU2m80cO3bMsSzt+t94jowxpk6dOqZevXqO95999pmRZKZMmeJYdv36dXPvvfem+1zXrl3bFC9e3Jw9e9axbOfOnaZAgQKmZ8+ejmVpn/MBAwY47bN06dLGZrOZyZMnO5anfSZ79eqVrfOU0fd82uc2rS8TJkxw2u6RRx4xNpvNHDp0yLFMkilQoIDZs2ePU9t+/fqZ4OBgc+bMGafljz/+uLHb7Y7z37lzZ1O9evUs683sZwaAvIPbCwHkC6+//rqWL1/u9JL+HMm4cOGCunXrpjNnzjhebm5uatSokVatWuXYh7e3t+PrK1eu6MyZM7rnnnskSdu2bbOk7meeecbp/SeffKLU1FR17drVqd6goCCFhYU51XurnnrqKcfXAQEBqly5snx8fNS1a1fH8sqVKysgIEBHjhxJt/2AAQOcRqqeffZZubu766uvvpL05+jH1atXNXToUBUo8H///PTv31/+/v5aunSp0/48PT3Vp0+fbNfv6enp2G9KSorOnj0rX19fVa5cOcPr06dPH6dJFe69915JcvRt+/btOnr0qIYOHZpu9DBt5O7cuXP67rvv1LVrV128eNFxPc6ePavIyEgdPHhQv/76a7b7kB3ffvutAgMDFRgYqPDwcL377rvq06ePXnnlFad2N35eL126pDNnzqhJkyYyxmj79u3p9vvXz9q9997rdJ2/+uorubu7O0a+JMnNzU3//Oc/nbY7ceKEduzYod69e6tIkSKO5TVr1lTr1q0dn4cb3fjZc3NzU/369WWMUb9+/RzL0z6TGX32MtKoUaN03/M9e/Z09MXNzU2DBw922mbYsGEyxujrr792Wt68eXNVq1bN8d4YoyVLlqhTp04yxjh9L0ZGRiohIcHxmQsICNAvv/yizZs3Z6tuAHkTtxcCyBcaNmyY4UQaBw8elCTdf//9GW7n7+/v+PrcuXOKiYnR4sWLderUKad2CQkJOVjt//nrLXwHDx6UMUZhYWEZtr8x9NwKLy+vdLcz2e12lS5d2hEwblye0bNaf63J19dXwcHBjmdTjh07JunP4HYjDw8PlS9f3rE+TalSpW5pprnU1FTNnDlTc+bM0dGjR52eRypatGi69mXLlnV6n3Z7Xlrf0p6RymqWy0OHDskYo+joaEVHR2fY5tSpUypVqlSG606fPu1Up6+vr3x9fTM9nvRnmJgwYYJSUlL0008/acKECTp//ny6cxUfH6/Ro0friy++SHe9/vp5zej6Fy5c2Gm7Y8eOKTg4OF19f72emV1nSapataq++eabdJPC/PVa2O12eXl5OW61u3H5jc9QZqVYsWJq1apVhuuOHTumkiVLys/PL119N/YhzV+/D0+fPq0LFy7ozTff1JtvvpnhMdJ+RowcOVIrVqxQw4YNVbFiRbVp00bdu3dXREREtvoBIG8gdAHI11JTUyX9+VxXUFBQuvXu7v/3Y7Jr165av369RowYodq1a8vX11epqalq27atYz9Z+Wt4SfPXyQpudONoRVq9NptNX3/9tdzc3NK1v9kv7JnJaF9ZLTd/mWzACn/t+81MmjRJ0dHR6tu3r8aPH68iRYqoQIECGjp0aIbXJyf6lrbf4cOHKzIyMsM2FStWzHT7Bg0aOP2C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mWbNmpmiRYsaT09PU6FCBTNixAiTkJDgtK/MfmYAyBtsxrjgiVQAQJ6xYMEC9enTR5s3b85whkgAAPI7nukCAAAAAAsRugAAAADAQoQuAAAAALAQz3QBAAAAgIUY6QIAAAAACxG6AAAAAMBC/HHkW5SamqrffvtNfn5+stlsri4HAAAAgIsYY3Tx4kWVLFlSBQpkPp5F6LpFv/32m8qUKePqMgAAAADcJY4fP67SpUtnup7QdYv8/Pwk/Xli/f39XVwNAAAAAFdJTExUmTJlHBkhM4SuW5R2S6G/vz+hCwAAAMBNHztiIg0AAAAAsBChCwAAAAAsROgCAAAAAAsRugAAAADAQoQuAAAAALAQoQsAAAAALEToAgAAAAALEboAAAAAwEKELgAAAACwEKELAAAAACxE6AIAAAAACxG6AAAAAMBChC4AAAAAsBChCwAAAAAsROgCAAAAAAsRugAAAADAQoQuAAAAALAQoQsAAAAALOTu6gJyK3usXfJydRUAAABA/mHGGFeXcFsY6QIAAAAACxG6AAAAAMBChC4AAAAAsBChCwAAAAAsROgCAAAAAAsRugAAAADAQoQuAAAAALAQoQsAAAAALEToAgAAAAALEboAAAAAwEJ5MnSlpqZqypQpqlixojw9PVW2bFlNnDhRkjRy5EhVqlRJhQoVUvny5RUdHa1r1665uGIAAAAAeZW7qwuwQlRUlObPn6/p06eradOmOnHihPbv3y9J8vPz04IFC1SyZEnt3r1b/fv3l5+fn1544YUM95WcnKzk5GTH+8TExDvSBwAAAAB5g80YY1xdRE66ePGiAgMDNXv2bD311FM3bT916lQtXrxYW7ZsyXD92LFjFRMTk37Fi5K8/maxAAAAALLNjLm7oktiYqLsdrsSEhLk7++fabs8d3vhvn37lJycrJYtW2a4/oMPPlBERISCgoLk6+url156SfHx8ZnuLyoqSgkJCY7X8ePHrSodAAAAQB6U50KXt7d3pus2bNigJ554Qu3bt9eXX36p7du3a9SoUbp69Wqm23h6esrf39/pBQAAAADZledCV1hYmLy9vbVy5cp069avX6+QkBCNGjVK9evXV1hYmI4dO+aCKgEAAADkF3luIg0vLy+NHDlSL7zwgjw8PBQREaHTp09rz549CgsLU3x8vBYvXqwGDRpo6dKl+vTTT11dMgAA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atq0qQICAlS0aFF17NhRhw8fdqxfv369ateuLS8vL9WvX1+fffaZbDabduzY4Wjz008/qV27dvL19VWJEiXUo0cPnTlzxgW9AQAAAJAf5KrQdenSJT3//PPasmWLVq5cqQIFCuihhx5SamqqEhMT1alTJ4WHh2vbtm0aP368Ro4c6bT9hQsXdP/996tOnTrasmWLli1bppMnT6pr166ZHjM5OVmJiYlOLwAAAADILndXF3ArHn74Yaf3b7/9tgIDA7V3716tXbtWNptN8+fPl5eXl6pVq6Zff/1V/fv3d7SfPXu26tSpo0mTJjnto0yZMvr5559VqVKldMeMjY1VTEyMdZ0CAAAAkKflqpGugwcPqlu3bipfvrz8/f0VGhoqSYqPj9eBAwdUs2ZNeXl5Odo3bNjQafudO3dq1apV8vX1dbyqVKkiSU63Kd4oKipKCQkJjtfx48et6RwAAACAPClXjXR16tRJISEhmj9/vkqWLKnU1FTVqFFDV69ezdb2SUlJ6tSpk15++eV064KDgzPcxtPTU56enn+rbgAAAAD5V64JXWfPntWBAwc0f/583XvvvZKktWvXOtZXrlxZ7733npKTkx0hafPmzU77qFu3rpYsWaLQ0FC5u+eargMAAADIxXLN7YWFCxdW0aJF9eabb+rQoUP67rvv9PzzzzvWd+/eXampqRowYID27dunb775RlOnTpUk2Ww2SdLAgQN17tw5devWTZs3b9bhw4f1zTffqE+fPkpJSXFJvwAAAADkbbkmdBUoUECLFy/W1q1bVaNGDT333HN65ZVXHOv9/f31v//9Tzt27FDt2rU1atQojR49WpIcz3mVLFlS69atU0pKitq0aaPw8HANHTpUAQEBKlAg15wKAAAAALmIzRhjXF2EVRYtWqQ+ffooISFB3t7eObLPxMRE2e126UVJXjdtDgBAjjNj8uw/3QCQq6Rlg4SEBPn7+2faLk892PSf//xH5cuXV6lSpbRz506NHDlSXbt2zbHABQAAAAC3Kk+Frt9//12jR4/W77//ruDgYD366KOaOHGiq8sCAAAAkI/l6dsLrcDthQAAV+P2QgC4O2T39kJmjwAAAAAACxG6AAAAAMBChC4AAAAAsFCemkjjTkqIyvq+TQAAAACQGOkCAAAAAEsRugAAAADAQoQuAAAAALAQoQsAAAAALEToAgAA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\n",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "importances = best_forest.feature_importances_\n",
        "features = best_forest.feature_names_in_\n",
        "indices = np.argsort(importances)\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.barh(range(len(indices)), importances[indices], color='green')\n",
        "plt.yticks(range(len(indices)), features[indices])\n",
        "plt.xlabel('Importance')\n",
        "plt.title('Feature Importance - Random Forest')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0j_HxpQu1mLV",
        "outputId": "6604e797-c6d4-4ead-9ad3-28ad2cbd9278"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            " الشخص غير مُصاب بمرض القلب.\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        " # أدخل بيانات المريض\n",
        "# الترتيب: age,sex,cp,trestbps,chol,fbs,restecg,thalach,exang,oldpeak,slope,ca,thal\n",
        "new_patient = [[47 ,\t1,\t0,\t110,\t275,\t0,\t0,\t118,\t1,\t1.0,\t1,\t1,\t2\t]]\n",
        "\n",
        "#  تحويل البيانات بنفس الـ StandardScaler اللي استخدمناه قبل كده\n",
        "new_patient_scaled = scaler.transform(new_patient)\n",
        "\n",
        "# التنبؤ باستخدام الموديل الأفضل\n",
        "prediction = best_forest.predict(new_patient)\n",
        "\n",
        "# طباعة النتيجة\n",
        "if prediction[0] == 1:\n",
        "    print(\" الشخص مُصاب بمرض القلب.\")\n",
        "else:\n",
        "    print(\" الشخص غير مُصاب بمرض القلب.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hkPiOI2XTDTH"
      },
      "outputs": [],
      "source": [
        "# streamlit_app.py\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import roc_curve, roc_auc_score, classification_report, confusion_matrix\n",
        "# باقي الكود من النوتبوك بتاعك"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2UXD5GJgTNHi",
        "outputId": "de9dde5e-8818-44aa-9fdf-d51da093a158"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-09-21 08:04:13.083 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.085 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.086 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.087 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.089 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.089 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.090 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.091 No runtime found, using MemoryCacheStorageManager\n",
            "2025-09-21 08:04:13.093 No runtime found, using MemoryCacheStorageManager\n",
            "2025-09-21 08:04:13.094 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.095 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.096 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.097 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.109 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.110 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.111 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.342 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.343 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.344 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.371 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.533 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.534 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.536 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.580 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.748 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.748 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.751 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.752 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.753 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.754 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.755 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.756 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.757 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.758 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.759 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.759 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.760 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.761 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.762 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.763 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.764 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.765 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.766 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.766 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.767 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.767 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:13.768 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "st.set_page_config(page_title=\"توقع مرض القلب\", layout=\"wide\")\n",
        "st.title(\"🔍 نظام توقع مرض القلب\")\n",
        "st.markdown(\"واجهة تفاعلية لتحليل بيانات المرضى والتنبؤ بإصابتهم بمرض القلب باستخدام نماذج تعلم الآلة.\")\n",
        "@st.cache_data\n",
        "def load_data():\n",
        "    df = pd.read_csv('/kaggle/input/heart-disease-dataset/heart.csv')\n",
        "    return df\n",
        "\n",
        "df = load_data()\n",
        "x, y = df.drop('target', axis=1), df['target']\n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# تدريب النموذج الأفضل\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "forest = RandomForestClassifier()\n",
        "forest.fit(x_train, y_train)\n",
        "st.subheader(\"📊 تحليل أداء النموذج\")\n",
        "\n",
        "# ROC Curve\n",
        "y_prob = forest.predict_proba(x_test)[:, 1]\n",
        "fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
        "fig, ax = plt.subplots()\n",
        "ax.plot(fpr, tpr, label=\"Random Forest\")\n",
        "ax.plot([0, 1], [0, 1], 'k--')\n",
        "ax.set_xlabel(\"False Positive Rate\")\n",
        "ax.set_ylabel(\"True Positive Rate\")\n",
        "ax.set_title(\"ROC Curve\")\n",
        "st.pyplot(fig)\n",
        "\n",
        "# Feature Importance\n",
        "importances = forest.feature_importances_\n",
        "features = forest.feature_names_in_\n",
        "indices = np.argsort(importances)\n",
        "fig2, ax2 = plt.subplots()\n",
        "ax2.barh(range(len(indices)), importances[indices], color='green')\n",
        "ax2.set_yticks(range(len(indices)))\n",
        "ax2.set_yticklabels(features[indices])\n",
        "ax2.set_xlabel(\"Importance\")\n",
        "ax2.set_title(\"Feature Importance\")\n",
        "st.pyplot(fig2)\n",
        "st.subheader(\"🧪 اختبار عشوائي لمريض\")\n",
        "\n",
        "if st.button(\"اختبار مريض عشوائي\"):\n",
        "    idx = np.random.randint(0, len(x_test))\n",
        "    patient = x_test.iloc[idx:idx+1]\n",
        "    st.write(\"بيانات المريض:\", patient)\n",
        "\n",
        "    prediction = forest.predict(patient)\n",
        "    result = \"✅ غير مصاب\" if prediction[0] == 0 else \"⚠️ مصاب\"\n",
        "    st.markdown(f\"### النتيجة: {result}\")\n",
        "st.subheader(\"📁 سجل التنبؤات\")\n",
        "if \"history\" not in st.session_state:\n",
        "    st.session_state.history = []\n",
        "\n",
        "if st.button(\"حفظ النتيجة\"):\n",
        "    st.session_state.history.append({\n",
        "        \"index\": idx,\n",
        "        \"result\": result,\n",
        "        \"features\": patient.to_dict()\n",
        "    })\n",
        "\n",
        "if st.session_state.history:\n",
        "    st.write(pd.DataFrame(st.session_state.history))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X_foRor_TcRH",
        "outputId": "c02caf33-e8bd-4bc3-f10a-1c684af5227f"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-09-21 08:04:46.175 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:46.176 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:46.177 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:46.314 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:47.225 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:47.226 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:47.227 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "execution_count": 77,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "st.subheader(\"📈 مقارنة أداء النماذج\")\n",
        "\n",
        "models = ['Random Forest', 'Gradient Boost', 'Logistic Regression']\n",
        "accuracies = [0.985, 0.932, 0.795]\n",
        "roc_aucs = [1.0, 0.981, 0.879]\n",
        "\n",
        "x_pos = np.arange(len(models))\n",
        "fig3, ax3 = plt.subplots()\n",
        "ax3.bar(x_pos - 0.2, accuracies, width=0.4, label='Accuracy')\n",
        "ax3.bar(x_pos + 0.2, roc_aucs, width=0.4, label='ROC AUC')\n",
        "ax3.set_xticks(x_pos)\n",
        "ax3.set_xticklabels(models)\n",
        "ax3.set_ylabel(\"Score\")\n",
        "ax3.set_title(\"Model Performance Comparison\")\n",
        "ax3.legend()\n",
        "st.pyplot(fig3)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wmgd4-6VTfOz",
        "outputId": "733d6d73-ed98-40cb-b141-8bd9eae11281"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-09-21 08:04:58.769 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.771 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.772 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.773 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.774 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.775 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.776 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.782 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.783 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.784 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.785 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.786 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.787 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.788 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.788 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.789 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.790 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.791 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.791 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.792 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.793 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.794 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.796 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.797 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.797 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.800 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.801 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.801 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.802 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.802 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.803 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.809 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.809 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.810 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.811 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.811 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.812 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.813 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.813 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.814 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.814 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.815 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.816 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.816 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.818 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.819 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.819 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.823 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.824 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.824 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.825 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.826 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.827 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.827 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.831 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.832 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.833 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.833 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.834 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.834 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.835 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.835 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.836 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.836 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.837 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.840 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.841 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.844 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.844 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.844 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.845 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.846 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.847 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.856 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.857 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.857 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.858 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.859 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.860 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.860 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.861 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.862 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.862 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.863 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.865 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.865 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.869 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.869 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.870 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.870 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.871 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.872 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.873 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.873 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.878 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.878 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.879 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.880 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.880 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.881 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-09-21 08:04:58.882 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        }
      ],
      "source": [
        "st.subheader(\"📝 إدخال بيانات مريض يدويًا\")\n",
        "\n",
        "with st.form(\"manual_input\"):\n",
        "    age = st.number_input(\"العمر\", min_value=20, max_value=100, value=50)\n",
        "    sex = st.selectbox(\"الجنس\", [0, 1])\n",
        "    cp = st.selectbox(\"نوع ألم الصدر\", [0, 1, 2, 3])\n",
        "    trestbps = st.number_input(\"ضغط الدم\", value=120)\n",
        "    chol = st.number_input(\"الكوليسترول\", value=200)\n",
        "    fbs = st.selectbox(\"سكر صائم > 120\", [0, 1])\n",
        "    restecg = st.selectbox(\"نتيجة تخطيط القلب\", [0, 1, 2])\n",
        "    thalach = st.number_input(\"أقصى معدل نبض\", value=150)\n",
        "    exang = st.selectbox(\"هل يعاني من الذبحة الصدرية؟\", [0, 1])\n",
        "    oldpeak = st.number_input(\"ST depression\", value=1.0)\n",
        "    slope = st.selectbox(\"منحنى ST\", [0, 1, 2])\n",
        "    ca = st.selectbox(\"عدد الأوعية الملونة\", [0, 1, 2, 3])\n",
        "    thal = st.selectbox(\"نتيجة اختبار thal\", [0, 1, 2, 3])\n",
        "\n",
        "    submitted = st.form_submit_button(\"تنبؤ الحالة\")\n",
        "\n",
        "if submitted:\n",
        "    new_patient = [[age, sex, cp, trestbps, chol, fbs, restecg,\n",
        "                    thalach, exang, oldpeak, slope, ca, thal]]\n",
        "    new_patient_scaled = scaler.transform(new_patient)\n",
        "    prediction = best_forest.predict(new_patient_scaled)\n",
        "    result = \"✅ غير مصاب\" if prediction[0] == 0 else \"⚠️ مصاب\"\n",
        "    st.markdown(f\"### النتيجة: {result}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8j6KjUTFTiha"
      },
      "outputs": [],
      "source": [
        "if submitted and st.button(\"حفظ التنبؤ اليدوي\"):\n",
        "    st.session_state.history.append({\n",
        "        \"index\": \"manual\",\n",
        "        \"result\": result,\n",
        "        \"features\": {\n",
        "            \"age\": age, \"sex\": sex, \"cp\": cp, \"trestbps\": trestbps,\n",
        "            \"chol\": chol, \"fbs\": fbs, \"restecg\": restecg, \"thalach\": thalach,\n",
        "            \"exang\": exang, \"oldpeak\": oldpeak, \"slope\": slope, \"ca\": ca, \"thal\": thal\n",
        "        }\n",
        "    })"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nrw-_ctHWfLJ",
        "outputId": "e9c72104-8866-44dc-c57c-989b51e6675a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.12/dist-packages (1.49.1)\n",
            "Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.32.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.12/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (4.15.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.12/dist-packages (from streamlit) (3.1.45)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.12/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (4.25.1)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2.4.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.12/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2025.8.3)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.12/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2025.9.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.27.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Requirement already satisfied: pyngrok in /usr/local/lib/python3.12/dist-packages (7.3.0)\n",
            "Requirement already satisfied: PyYAML>=5.1 in /usr/local/lib/python3.12/dist-packages (from pyngrok) (6.0.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install streamlit\n",
        "!pip install pyngrok"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Amwi9SbAbGKS",
        "outputId": "b249acb8-9197-46e1-e58c-1b8e630e7023"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ],
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import roc_curve, roc_auc_score\n",
        "\n",
        "# Page config\n",
        "st.set_page_config(page_title=\"Heart Disease Predictor\", layout=\"wide\")\n",
        "\n",
        "st.title(\"💓 Heart Disease Prediction Dashboard\")\n",
        "st.markdown(\"This app uses machine learning models to predict heart disease based on patient data.\")\n",
        "\n",
        "# Load data\n",
        "df = pd.read_csv('/kaggle/input/heart-disease-dataset/heart.csv')\n",
        "x, y = df.drop('target', axis=1), df['target']\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Scale data\n",
        "scaler = StandardScaler()\n",
        "x_train_scaled = scaler.fit_transform(x_train)\n",
        "x_test_scaled = scaler.transform(x_test)\n",
        "\n",
        "# Train models\n",
        "forest = RandomForestClassifier().fit(x_train, y_train)\n",
        "gb = GradientBoostingClassifier().fit(x_train, y_train)\n",
        "log = LogisticRegression().fit(x_train_scaled, y_train)\n",
        "best_model = forest\n",
        "\n",
        "# Accuracy\n",
        "st.metric(\"🎯 Model Accuracy\", f\"{best_model.score(x_test, y_test):.2%}\")\n",
        "\n",
        "# ROC Curve\n",
        "with st.expander(\"📈 ROC Curve\"):\n",
        "    y_prob = best_model.predict_proba(x_test)[:, 1]\n",
        "    fpr, tpr, _ = roc_curve(y_test, y_prob)\n",
        "    fig, ax = plt.subplots(figsize=(6, 4))\n",
        "    ax.plot(fpr, tpr, label=\"Random Forest\", color='red')\n",
        "    ax.plot([0, 1], [0, 1], 'k--')\n",
        "    ax.set_xlabel(\"False Positive Rate\")\n",
        "    ax.set_ylabel(\"True Positive Rate\")\n",
        "    ax.set_title(\"ROC Curve\")\n",
        "    st.pyplot(fig)\n",
        "\n",
        "# Feature Importance\n",
        "with st.expander(\"🧠 Feature Importance\"):\n",
        "    importances = best_model.feature_importances_\n",
        "    features = best_model.feature_names_in_\n",
        "    indices = np.argsort(importances)\n",
        "    fig2, ax2 = plt.subplots(figsize=(6, 4))\n",
        "    ax2.barh(range(len(indices)), importances[indices], color='green')\n",
        "    ax2.set_yticks(range(len(indices)))\n",
        "    ax2.set_yticklabels(features[indices])\n",
        "    ax2.set_xlabel(\"Importance\")\n",
        "    ax2.set_title(\"Feature Importance\")\n",
        "    st.pyplot(fig2)\n",
        "\n",
        "# Model Comparison\n",
        "with st.expander(\"📊 Model Comparison\"):\n",
        "    models = ['Random Forest', 'Gradient Boost', 'Logistic Regression']\n",
        "    accuracies = [forest.score(x_test, y_test), gb.score(x_test, y_test), log.score(x_test_scaled, y_test)]\n",
        "    aucs = [\n",
        "        roc_auc_score(y_test, forest.predict_proba(x_test)[:, 1]),\n",
        "        roc_auc_score(y_test, gb.predict_proba(x_test)[:, 1]),\n",
        "        roc_auc_score(y_test, log.predict_proba(x_test_scaled)[:, 1])\n",
        "    ]\n",
        "    fig3, ax3 = plt.subplots(figsize=(6, 4))\n",
        "    x_pos = np.arange(len(models))\n",
        "    ax3.bar(x_pos - 0.2, accuracies, width=0.4, label='Accuracy')\n",
        "    ax3.bar(x_pos + 0.2, aucs, width=0.4, label='ROC AUC')\n",
        "    ax3.set_xticks(x_pos)\n",
        "    ax3.set_xticklabels(models)\n",
        "    ax3.set_ylabel(\"Score\")\n",
        "    ax3.set_title(\"Model Performance\")\n",
        "    ax3.legend()\n",
        "    st.pyplot(fig3)\n",
        "\n",
        "# Random patient test\n",
        "st.subheader(\"🧪 Test Random Patient\")\n",
        "if st.button(\"Test\"):\n",
        "    idx = np.random.randint(0, len(x_test))\n",
        "    patient = x_test.iloc[idx:idx+1]\n",
        "    st.write(\"Patient Data:\", patient)\n",
        "    prediction = best_model.predict(patient)\n",
        "    if prediction[0] == 0:\n",
        "        st.success(\"Prediction: ✅ No Disease\")\n",
        "    else:\n",
        "        st.error(\"Prediction: ⚠️ Has Disease\")\n",
        "\n",
        "# Manual input\n",
        "st.subheader(\"📝 Manual Patient Entry\")\n",
        "with st.form(\"manual_input\"):\n",
        "    age = st.number_input(\"Age\", min_value=20, max_value=100, value=50)\n",
        "    sex = st.selectbox(\"Sex\", [0, 1])\n",
        "    cp = st.selectbox(\"Chest Pain Type\", [0, 1, 2, 3])\n",
        "    trestbps = st.number_input(\"Resting Blood Pressure\", value=120)\n",
        "    chol = st.number_input(\"Cholesterol\", value=200)\n",
        "    fbs = st.selectbox(\"Fasting Blood Sugar > 120\", [0, 1])\n",
        "    restecg = st.selectbox(\"Resting ECG\", [0, 1, 2])\n",
        "    thalach = st.number_input(\"Max Heart Rate\", value=150)\n",
        "    exang = st.selectbox(\"Exercise Induced Angina\", [0, 1])\n",
        "    oldpeak = st.number_input(\"ST Depression\", value=1.0)\n",
        "    slope = st.selectbox(\"Slope of ST\", [0, 1, 2])\n",
        "    ca = st.selectbox(\"Colored Vessels\", [0, 1, 2, 3])\n",
        "    thal = st.selectbox(\"Thal Result\", [0, 1, 2, 3])\n",
        "    submitted = st.form_submit_button(\"Predict\")\n",
        "\n",
        "if submitted:\n",
        "    new_patient = [[age, sex, cp, trestbps, chol, fbs, restecg,\n",
        "                    thalach, exang, oldpeak, slope, ca, thal]]\n",
        "    new_patient_scaled = scaler.transform(new_patient)\n",
        "    prediction = best_model.predict(new_patient_scaled)\n",
        "    if prediction[0] == 0:\n",
        "        st.success(\"Prediction: ✅ No Disease\")\n",
        "    else:\n",
        "        st.error(\"Prediction: ⚠️ Has Disease\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "d8sJ4Q6wbISy",
        "outputId": "d7e0f927-8eb3-41a0-e97a-df37ebdb2e57"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "🔗 Open your app here: NgrokTunnel: \"https://74d826353bf2.ngrok-free.app\" -> \"http://localhost:8501\"\n",
            "\n",
            "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n",
            "\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8501\u001b[0m\n",
            "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.12:8501\u001b[0m\n",
            "\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://35.221.23.33:8501\u001b[0m\n",
            "\u001b[0m\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "from pyngrok import ngrok\n",
        "public_url = ngrok.connect(8501, \"http\")\n",
        "print(\"🔗 Open your app here:\", public_url)\n",
        "\n",
        "!streamlit run app.py & sleep 3\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CpktR0tjbINw"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KnmBiVO6bIHD"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
